{
	"info": {
		"_postman_id": "3f284f0a-efef-44d5-9957-0377b492400a",
		"name": "Bookshelf API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28489832"
	},
	"item": [
		{
			"name": "[Mandatory] Add Book With Complete Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil ditambahkan');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain bookId', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('bookId');\r",
							"    pm.expect(data.bookId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('bookId', data.bookId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Cantik Itu Luka\",\r\n    \"year\": 2002,\r\n    \"author\": \"Eka Kurniawan\",\r\n    \"summary\": \"buku ini mengisahkan tentang seorang perempuan keturunan Belanda bernama Dewi Ayu yang memiliki paras sangat cantik. Namun, kecantikannya tersebut bukannya membawa sesuatu yang menguntungkan, melainkan malah membawa malapetaka dan kutukan bagi dirinya, beserta keturunannya.\",\r\n    \"publisher\": \"Gramedia Pustaka Utama\",\r\n    \"pageCount\": 520,\r\n    \"readPage\": 500,\r\n    \"reading\": true\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Add Book With Complete Data Dicoding",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil ditambahkan');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain bookId', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('bookId');\r",
							"    pm.expect(data.bookId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('bookId', data.bookId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Dicoding\",\r\n    \"year\": 2023,\r\n    \"author\": \"Dicoding\",\r\n    \"summary\": \"Tim Reviewer akan mengulas submission Anda dalam waktu selambatnya 3 (tiga) hari kerja (tidak termasuk Sabtu, Minggu, dan hari libur nasional).\",\r\n    \"publisher\": \"Dicoding\",\r\n    \"pageCount\": 520,\r\n    \"readPage\": 500,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Add Book With Finished Reading",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil ditambahkan');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain bookId', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('bookId');\r",
							"    pm.expect(data.bookId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('bookIdWithFinishedReading', data.bookId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Kita Pergi Hari Ini\",\r\n    \"year\": 2021,\r\n    \"author\": \"Ziggy\",\r\n    \"summary\": \"Pada cerita fantasinya kali ini, penulis menyuguhkan kisah petualangan yang tak biasa antara tiga bersaudara yaitu Mi, Ma, dan Mo bersama tetangga mereka di Kota Suara, Fifi dan Fufu.\",\r\n    \"publisher\": \"Gramedia Pustaka Utama\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Add Book Without Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal menambahkan buku. Mohon isi nama buku');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"year\": 2012,\r\n    \"author\": \" Ilana Tan\",\r\n    \"summary\": \"buku ketiga dari Trilogi New York ini benar-benar ditunggu kisah kelanjutannya, apalagi rentang dari buku kedua, In A Blue Moon (2015), ke buku yang ketiga ini terpaut lima tahun penantian.\",\r\n    \"publisher\": \"Gramedia Pustaka Utama\",\r\n    \"pageCount\": 344,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Add Book with Page Read More Than Page Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal menambahkan buku. readPage tidak boleh lebih besar dari pageCount');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Bibi Gill\",\r\n    \"year\": 2022,\r\n    \"author\": \"Tere Liye\",\r\n    \"summary\": \"Di bukunya yang berjudul Bibi Gill, yang merupakan seri ke-12 dari serial Bumi, Bang Tere tidak akan mengajak kamu pada kelanjutan kisah perjalanan Raib, Seli, dan Ali dalam dunia paralel, tapi menceritakan tentang latar belakang dan sosok Bibi Gill yang sama sekali pembaca belum tahu.\",\r\n    \"publisher\": \"PENERBIT SABAK GRIP\",\r\n    \"pageCount\": 80,\r\n    \"readPage\": 90,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get All Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responsJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responsJson.status).to.equals('success');\r",
							"    pm.expect(responsJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have a array books and contains two items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).to.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test('the books should have contains only id, name, and publisher property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"\r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
							"        pm.expect(book).to.haveOwnProperty('id');\r",
							"        pm.expect(book).to.haveOwnProperty('name');\r",
							"        pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get Detail Books With Correct Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () =>  {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should contain correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should contain book object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('book');\r",
							"    pm.expect(data.book).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('book object should contain correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { book } } = responseJson;\r",
							"\r",
							"    pm.expect(book).to.haveOwnProperty('id');\r",
							"    pm.expect(book).to.haveOwnProperty('name');\r",
							"    pm.expect(book).to.haveOwnProperty('year');\r",
							"    pm.expect(book).to.haveOwnProperty('author');\r",
							"    pm.expect(book).to.haveOwnProperty('summary');\r",
							"    pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    pm.expect(book).to.haveOwnProperty('pageCount');\r",
							"    pm.expect(book).to.haveOwnProperty('readPage');\r",
							"    pm.expect(book).to.haveOwnProperty('finished');\r",
							"    pm.expect(book).to.haveOwnProperty('reading');\r",
							"    pm.expect(book).to.haveOwnProperty('insertedAt');\r",
							"    pm.expect(book).to.haveOwnProperty('updatedAt');\r",
							"\r",
							"    pm.expect(book.id).to.equals(pm.environment.get('bookId'));\r",
							"    pm.expect(book.name).to.equals(pm.environment.get('newName'));\r",
							"    pm.expect(book.year).to.equals(Number(pm.environment.get('newYear')));\r",
							"    pm.expect(book.author).to.equals(pm.environment.get('newAuthor'));\r",
							"    pm.expect(book.summary).to.equals(pm.environment.get('newSummary'));\r",
							"    pm.expect(book.publisher).to.equals(pm.environment.get('newPublisher'));\r",
							"    pm.expect(book.pageCount).to.equals(Number(pm.environment.get('newPageCount')));\r",
							"    pm.expect(book.readPage).to.equals(Number(pm.environment.get('newReadPage')));\r",
							"    pm.expect(book.finished).to.equals(pm.environment.get('newPageCount') === pm.environment.get('newReadPage'));\r",
							"    pm.expect(book.reading).to.equals(pm.environment.get('newReading') == 'true');\r",
							"    pm.expect(book.insertedAt).to.not.equals('');\r",
							"    pm.expect(book.updatedAt).to.not.equals('');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books/X8gZpBD5vCuoI1nY",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"X8gZpBD5vCuoI1nY"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get Detail Finished Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () =>  {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should contain correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should contain book object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('book');\r",
							"    pm.expect(data.book).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('book object should contain correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { book } } = responseJson;\r",
							"\r",
							"    pm.expect(book).to.haveOwnProperty('id');\r",
							"    pm.expect(book).to.haveOwnProperty('name');\r",
							"    pm.expect(book).to.haveOwnProperty('year');\r",
							"    pm.expect(book).to.haveOwnProperty('author');\r",
							"    pm.expect(book).to.haveOwnProperty('summary');\r",
							"    pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    pm.expect(book).to.haveOwnProperty('pageCount');\r",
							"    pm.expect(book).to.haveOwnProperty('readPage');\r",
							"    pm.expect(book).to.haveOwnProperty('finished');\r",
							"    pm.expect(book).to.haveOwnProperty('reading');\r",
							"    pm.expect(book).to.haveOwnProperty('insertedAt');\r",
							"    pm.expect(book).to.haveOwnProperty('updatedAt');\r",
							"\r",
							"    pm.expect(book.id).to.equals(pm.environment.get('bookIdWithFinishedReading'));\r",
							"    pm.expect(book.name).to.equals(pm.environment.get('newName'));\r",
							"    pm.expect(book.year).to.equals(Number(pm.environment.get('newYear')));\r",
							"    pm.expect(book.author).to.equals(pm.environment.get('newAuthor'));\r",
							"    pm.expect(book.summary).to.equals(pm.environment.get('newSummary'));\r",
							"    pm.expect(book.publisher).to.equals(pm.environment.get('newPublisher'));\r",
							"    pm.expect(book.pageCount).to.equals(100);\r",
							"    pm.expect(book.readPage).to.equals(100);\r",
							"    pm.expect(book.finished).to.equals(true);\r",
							"    pm.expect(book.reading).to.equals(pm.environment.get('newReading') == 'true');\r",
							"    pm.expect(book.insertedAt).to.not.equals('');\r",
							"    pm.expect(book.updatedAt).to.not.equals('');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books/ZedSng7YYrpZoOrg",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"ZedSng7YYrpZoOrg"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get Detail Books With Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 404', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () =>  {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should contain correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Buku tidak ditemukan');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books/toXNtWpRa8zL-3JZ",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"toXNtWpRa8zL-3JZ"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Update Book With Complete Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil diperbarui');\r",
							"});\r",
							"\r",
							"pm.test('when get detail books', () => {\r",
							"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books/${pm.environment.get('bookId')}`, (error, response) => {\r",
							"       const responseJson = response.json();\r",
							"       const { data: { book} } = responseJson;\r",
							"\r",
							"       pm.test('book object should contain updated values', () => {\r",
							"            pm.expect(book).to.haveOwnProperty('id');\r",
							"            pm.expect(book).to.haveOwnProperty('name');\r",
							"            pm.expect(book).to.haveOwnProperty('year');\r",
							"            pm.expect(book).to.haveOwnProperty('author');\r",
							"            pm.expect(book).to.haveOwnProperty('summary');\r",
							"            pm.expect(book).to.haveOwnProperty('publisher');\r",
							"            pm.expect(book).to.haveOwnProperty('pageCount');\r",
							"            pm.expect(book).to.haveOwnProperty('readPage');\r",
							"            pm.expect(book).to.haveOwnProperty('finished');\r",
							"            pm.expect(book).to.haveOwnProperty('reading');\r",
							"            pm.expect(book).to.haveOwnProperty('insertedAt');\r",
							"            pm.expect(book).to.haveOwnProperty('updatedAt');\r",
							"            \r",
							"            pm.expect(book.id).to.equals(pm.environment.get('bookId'));\r",
							"            pm.expect(book.name).to.equals(pm.environment.get('updateName'));\r",
							"            pm.expect(book.year).to.equals(Number(pm.environment.get('updateYear')));\r",
							"            pm.expect(book.author).to.equals(pm.environment.get('updateAuthor'));\r",
							"            pm.expect(book.summary).to.equals(pm.environment.get('updateSummary'));\r",
							"            pm.expect(book.publisher).to.equals(pm.environment.get('updatePublisher'));\r",
							"            pm.expect(book.pageCount).to.equals(Number(pm.environment.get('updatePageCount')));\r",
							"            pm.expect(book.readPage).to.equals(Number(pm.environment.get('updateReadPage')));\r",
							"            pm.expect(book.finished).to.equals(pm.environment.get('updateReadPage') === pm.environment.get('updatePageCount'));\r",
							"            pm.expect(book.reading).to.equals(pm.environment.get('updateReading') == 'true');\r",
							"            pm.expect(book.insertedAt).to.not.equals('');\r",
							"            pm.expect(book.updatedAt).to.not.equals('');\r",
							"       }); \r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Cantik Itu Luka\",\r\n    \"year\": 2020,\r\n    \"author\": \"Eka Kurniawan\",\r\n    \"summary\": \"buku ini mengisahkan tentang seorang perempuan keturunan Belanda bernama Dewi Ayu yang memiliki paras sangat cantik. Namun, kecantikannya tersebut bukannya membawa sesuatu yang menguntungkan, melainkan malah membawa malapetaka dan kutukan bagi dirinya, beserta keturunannya.\",\r\n    \"publisher\": \"Gramedia Pustaka Utama\",\r\n    \"pageCount\": 520,\r\n    \"readPage\": 500,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books/X8gZpBD5vCuoI1nY",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"X8gZpBD5vCuoI1nY"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Update Book Without Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.not.haveOwnProperty('data')\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal memperbarui buku. Mohon isi nama buku');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"year\": 2012,\r\n    \"author\": \" Ilana Tan\",\r\n    \"summary\": \"buku ketiga dari Trilogi New York ini benar-benar ditunggu kisah kelanjutannya, apalagi rentang dari buku kedua, In A Blue Moon (2015), ke buku yang ketiga ini terpaut lima tahun penantian.\",\r\n    \"publisher\": \"Gramedia Pustaka Utama\",\r\n    \"pageCount\": 344,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books/X8gZpBD5vCuoI1nY",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"X8gZpBD5vCuoI1nY"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Update Book With Page Read More Than Page Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal memperbarui buku. readPage tidak boleh lebih besar dari pageCount');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Bibi Gill\",\r\n    \"year\": 2022,\r\n    \"author\": \"Tere Liye\",\r\n    \"summary\": \"Di bukunya yang berjudul Bibi Gill, yang merupakan seri ke-12 dari serial Bumi, Bang Tere tidak akan mengajak kamu pada kelanjutan kisah perjalanan Raib, Seli, dan Ali dalam dunia paralel, tapi menceritakan tentang latar belakang dan sosok Bibi Gill yang sama sekali pembaca belum tahu.\",\r\n    \"publisher\": \"PENERBIT SABAK GRIP\",\r\n    \"pageCount\": 80,\r\n    \"readPage\": 90,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books/X8gZpBD5vCuoI1nY",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"X8gZpBD5vCuoI1nY"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Update Book with Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 404', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal memperbarui buku. Id tidak ditemukan');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Bibi Gill\",\r\n    \"year\": 2022,\r\n    \"author\": \"Tere Liye\",\r\n    \"summary\": \"Di bukunya yang berjudul Bibi Gill, yang merupakan seri ke-12 dari serial Bumi, Bang Tere tidak akan mengajak kamu pada kelanjutan kisah perjalanan Raib, Seli, dan Ali dalam dunia paralel, tapi menceritakan tentang latar belakang dan sosok Bibi Gill yang sama sekali pembaca belum tahu.\",\r\n    \"publisher\": \"PENERBIT SABAK GRIP\",\r\n    \"pageCount\": 800,\r\n    \"readPage\": 90,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books/X8gZpBD5vCuoI1ns",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"X8gZpBD5vCuoI1ns"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Delete Book with Correct Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil dihapus');\r",
							"});\r",
							"\r",
							"pm.test('when get detail books', () => {\r",
							"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books/${pm.environment.get('bookId')}`, (error, response) => {\r",
							"       pm.test('The book should be not found', () => {\r",
							"          pm.expect(response.code).to.equals(404);\r",
							"       }); \r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books/aaoCnOSV86hy2To9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"aaoCnOSV86hy2To9"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Delete Finished book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil dihapus');\r",
							"});\r",
							"\r",
							"pm.test('when get detail books', () => {\r",
							"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books/${pm.environment.get('bookIdWithFinishedReading')}`, (error, response) => {\r",
							"       pm.test('The book should be not found', () => {\r",
							"          pm.expect(response.code).to.equals(404);\r",
							"       }); \r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books/AIeFF6xUPQzorVWR",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"AIeFF6xUPQzorVWR"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Delete Book with Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 404', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Buku gagal dihapus. Id tidak ditemukan');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books/AIeFF6xUPQzorVWR",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"AIeFF6xUPQzorVWR"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Reading and Finished Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Hujan\",\r\n    \"year\": 2022,\r\n    \"author\": \"Tere Liye\",\r\n    \"summary\": \"Pertemuan keduanya yang tidak terduga akibat dari peristiwa kejadian gunung meletus yang terjadi pada tahun 2042, kemudian menghadirkan buih-buih cinta di antara keduanya.\",\r\n    \"publisher\": \"PENERBIT SABAK GRIP\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Reading and Unfinished Book with \"Dicoding\" Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Kelas Dicoding\",\r\n    \"year\": 2018,\r\n    \"author\": \"Dicoding Academy\",\r\n    \"summary\": \"Menjelaskan Tentang Berbagai Macam Pemrogaman\",\r\n    \"publisher\": \"Dicoding Media\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 99,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Unreading Books and Unfinished Book \"Dicoding\" Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"dicoding Jobs\",\r\n    \"year\": 2021,\r\n    \"author\": \"dicoding acamdemy\",\r\n    \"summary\": \"karir di dicoding\",\r\n    \"publisher\": \"dicoding media\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 0,\r\n    \"reading\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Unreading Books and Unfinished Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Hujan Bulan Juni\",\r\n    \"year\": 2015,\r\n    \"author\": \"Sapardi Djoko\",\r\n    \"summary\": \"seorang pujangga Indonesia yang terkenal dengan karya-karya literasi sajak dan puisinya. Meski ditulis pada tahun 1970-an, hasil karya Sapardi Djoko Damono yang tak lekang dimakan waktu tetap diingat hingga sekarang, bahkan dijadikan panduan bagi sastrawan masa kini.\",\r\n    \"publisher\": \"Gramedia Pustaka Utama\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 0,\r\n    \"reading\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Optional] Get All Reading Books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responsJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responsJson.status).to.equals('success');\r",
							"    pm.expect(responsJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have a array books and contains 2 items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).to.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test('the books should have contains only id, name, and publisher property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"\r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
							"        pm.expect(book).to.haveOwnProperty('id');\r",
							"        pm.expect(book).to.haveOwnProperty('name');\r",
							"        pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books?reading=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					],
					"query": [
						{
							"key": "reading",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Optional] Get All Unreading Books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responsJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responsJson.status).to.equals('success');\r",
							"    pm.expect(responsJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have a array books and contains at 2 items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).to.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test('the books should have contains only id, name, and publisher property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"\r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
							"        pm.expect(book).to.haveOwnProperty('id');\r",
							"        pm.expect(book).to.haveOwnProperty('name');\r",
							"        pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books?reading=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					],
					"query": [
						{
							"key": "reading",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Optional] Get All Finished Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responsJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responsJson.status).to.equals('success');\r",
							"    pm.expect(responsJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have a array books and contains 1 items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).to.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test('the books should have contains only id, name, and publisher property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"\r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
							"        pm.expect(book).to.haveOwnProperty('id');\r",
							"        pm.expect(book).to.haveOwnProperty('name');\r",
							"        pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books?finished=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					],
					"query": [
						{
							"key": "finished",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Optional] Get All Unfinished Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responsJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responsJson.status).to.equals('success');\r",
							"    pm.expect(responsJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have a array books and contains 3 items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).to.lengthOf(3);\r",
							"});\r",
							"\r",
							"pm.test('the books should have contains only id, name, and publisher property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"\r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
							"        pm.expect(book).to.haveOwnProperty('id');\r",
							"        pm.expect(book).to.haveOwnProperty('name');\r",
							"        pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books?finished=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					],
					"query": [
						{
							"key": "finished",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Optional] Get All Books Contains \"Dicoding\" Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responsJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responsJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responsJson).to.haveOwnProperty('data');\r",
							"\r",
							"    pm.expect(responsJson.status).to.equals('success');\r",
							"    pm.expect(responsJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have a array books and contains 2 items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).to.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test('the books should have contains only id, name, and publisher property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"\r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book)).to.lengthOf(3);\r",
							"        pm.expect(book).to.haveOwnProperty('id');\r",
							"        pm.expect(book).to.haveOwnProperty('name');\r",
							"        pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    });\r",
							"});\r",
							"\r",
							"const deleteAllNotes = () => {\r",
							"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books`, (error, response) => {\r",
							"        const responseJson = response.json();\r",
							"        const { data: { books } } = responseJson;\r",
							"        books.forEach(({ id }) => {\r",
							"            const deleteRequest = {\r",
							"                url: `http://localhost:${pm.environment.get('port')}/books/${id}`,\r",
							"                method: 'DELETE',\r",
							"            };\r",
							"            pm.sendRequest(deleteRequest, (error, response) => {\r",
							"                if(error) {\r",
							"                    console.log(`Failed to delete book ${id}`)\r",
							"                    return;\r",
							"                }\r",
							"                console.log(`Book ${id} deleted`);\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"};\r",
							"\r",
							"deleteAllNotes();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9000/books?name=Dicoding",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					],
					"query": [
						{
							"key": "name",
							"value": "Dicoding"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					""
				]
			}
		}
	]
}